
import uvicorn
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import logging
import uuid

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ --- 
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="Mock JSON-RPC MCP Server", version="1.0.0")

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏ --- 
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å Redis –∏–ª–∏ –¥—Ä—É–≥–∞—è –ë–î
SESSIONS = {}

# --- –û–ø–∏—Å–∞–Ω–∏–µ "—É–º–µ–Ω–∏–π" —Å–µ—Ä–≤–µ—Ä–∞ --- 
TOOLS_LIST = [
    {
      "name": "create_report",
      "description": "–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Å–µ—Å—Å–∏–∏.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "title": {"type": "string", "description": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞"},
          "text": {"type": "string", "description": "–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞"}
        },
        "required": ["title", "text"]
      }
    },
    {
      "name": "get_report_summary",
      "description": "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏.",
      "inputSchema": { "type": "object", "properties": {} }
    },
    {
      "name": "echo",
      "description": "–ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –ª—é–±—ã–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.",
      "inputSchema": {
        "type": "object",
        "properties": {
            "data": { "type": "object" }
        },
        "required": ["data"]
      }
    }
]

# --- –ì–ª–∞–≤–Ω—ã–π –∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—Å–µ—Ö JSON-RPC –∑–∞–ø—Ä–æ—Å–æ–≤ --- 
@app.post("/")
async def json_rpc_handler(request: Request):
    body = await request.json()

    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è JSON-RPC –∑–∞–ø—Ä–æ—Å–∞
    if "jsonrpc" not in body or body["jsonrpc"] != "2.0" or "method" not in body or "id" not in body:
        return JSONResponse(
            status_code=400,
            content={"jsonrpc": "2.0", "id": body.get("id"), "error": {"code": -32600, "message": "Invalid Request"}}
        )

    request_id = body["id"]
    method = body["method"]
    params = body.get("params", {})

    logger.info(f"‚ö°Ô∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: method='{method}', id={request_id}")

    # --- –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ --- 
    try:
        if method == "initialize":
            result = handle_initialize(params)
        elif method == "tools/list":
            result = handle_tools_list(params)
        elif method == "tools/call":
            result = handle_tools_call(params)
        else:
            raise HTTPException(status_code=404, detail=f"Method '{method}' not found")

        return JSONResponse(content={"jsonrpc": "2.0", "id": request_id, "result": result})

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ '{method}': {e}")
        return JSONResponse(
            status_code=500,
            content={"jsonrpc": "2.0", "id": request_id, "error": {"code": -32603, "message": "Internal Error", "data": str(e)}}
        )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ—Ç–æ–¥–æ–≤ --- 

def handle_initialize(params: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é."""
    session_id = str(uuid.uuid4()) # –í —Ä–µ–∞–ª—å–Ω–æ–º –º–∏—Ä–µ ID –º–æ–≥ –±—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    SESSIONS[session_id] = {
        "report_title": None,
        "report_text": None,
        "initialized_at": str(uuid.uuid4()) # –ü—Ä–æ—Å—Ç–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    }
    logger.info(f"ü§ù –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_id}")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ ID —Å–µ—Å—Å–∏–∏
    return {
        "protocolVersion": "2025-03-26",
        "serverInfo": {
            "name": "Mock MCP Server",
            "version": "1.0.0"
        },
        "sessionId": session_id # –û—Ç–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É –µ–≥–æ ID —Å–µ—Å—Å–∏–∏
    }

def handle_tools_list(params: dict):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
    logger.info(f"üìö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    return {"tools": TOOLS_LIST}

def handle_tools_call(params: dict):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –∏–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
    session_id = params.get("sessionId")
    tool_name = params.get("name")
    arguments = params.get("arguments", {})

    if not session_id:
        raise ValueError("Session ID is missing in params")

    # –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è —Å —Ç–∞–∫–∏–º ID –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–µ –Ω–∞ –ª–µ—Ç—É
    if session_id not in SESSIONS:
        logger.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è {session_id} –Ω–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –°–æ–∑–¥–∞—é –µ–µ –Ω–∞ –ª–µ—Ç—É.")
        SESSIONS[session_id] = {
            "report_title": None,
            "report_text": None,
            "initialized_at": str(uuid.uuid4())
        }

    logger.info(f"üõ† –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ '{tool_name}' –≤ —Å–µ—Å—Å–∏–∏ {session_id}")

    # --- –õ–æ–≥–∏–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ---
    if tool_name == "create_report":
        title = arguments.get("title")
        text = arguments.get("text")
        if not title or not text:
            raise ValueError("Missing title or text for create_report")
        SESSIONS[session_id]["report_title"] = title
        SESSIONS[session_id]["report_text"] = text
        return {"content": [{"type": "text", "text": f"–û—Ç—á–µ—Ç '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ —Å–µ—Å—Å–∏–∏."}], "isError": False}

    elif tool_name == "get_report_summary":
        report_text = SESSIONS[session_id].get("report_text")
        if not report_text:
            return {"content": [{"type": "text", "text": "–û—à–∏–±–∫–∞: –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ."}], "isError": True}
        
        summary = f"–í –æ—Ç—á–µ—Ç–µ '{SESSIONS[session_id]['report_title']}' —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è {len(report_text)} —Å–∏–º–≤–æ–ª–æ–≤."
        return {"content": [{"type": "text", "text": summary}], "isError": False}

    elif tool_name == "echo":
        return {"content": [{"type": "json", "json": arguments.get("data")}], "isError": False}

    else:
        raise ValueError(f"Unknown tool name: {tool_name}")

# --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ --- 
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Mock MCP Server –Ω–∞ http://localhost:8001")
    print("   - –ú–∞–Ω–∏—Ñ–µ—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ 'tools/list'")
    print("   - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ 'tools/call'")
    uvicorn.run(app, host="0.0.0.0", port=8001)
