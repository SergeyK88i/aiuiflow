{
  "benchmark_rag.md_0": "# Проект \"Аврора\": Система Управления Заказами\n\n## 1. Обзор Архитектуры\n\nСистема \"Аврора\" представляет собой микросервисную архитектуру, разработанную для эффективного управления жизненным циклом заказов в крупной розничной сети. Основные компоненты включают:\n\n*   **OrderService:** Отвечает за создание, изменение и отслеживание статусов заказов. Взаимодействует с PaymentService и InventoryService. *   **PaymentService:** Обрабатывает все финансовые транзакции, связанные с заказами. Использует сторонний API `StripeGateway` для процессинга платежей. *   **InventoryService:** Управляет складскими запасами. Обновляет количество товаров при создании заказа и резервирует их. *   **NotificationService:** Отправляет уведомления клиентам и внутренним системам о статусах заказов (email, SMS). *   **APIGateway:** Единая точка входа для всех внешних запросов, маршрутизирует их к соответствующим микросервисам. ## 2. Процесс Обработки Заказа\n\n1. Клиент отправляет запрос на создание заказа через APIGateway. 2. APIGateway перенаправляет запрос в OrderService. 3. OrderService:\n    *   Создает черновик заказа. *   Запрашивает резервирование товаров у InventoryService. *   Инициирует платеж через PaymentService. 4. PaymentService взаимодействует со StripeGateway. 5. После успешного платежа PaymentService уведомляет OrderService. 6. OrderService:\n    *   Обновляет статус заказа на \"Оплачен\". *   Уведомляет NotificationService об отправке подтверждения клиенту. 7. NotificationService отправляет email. ## 3. Типичные Проблемы и Решения\n\n### 3.1. Проблема: Заказ создан, но статус \"В ожидании оплаты\"\n\n*   **Описание:** Клиент утверждает, что оплата прошла, но в системе заказ висит со статусом \"В ожидании оплаты\". *   **Возможные причины:**\n    1. **Сбой связи с StripeGateway:** PaymentService не смог получить подтверждение от Stripe. 2. **Ошибка в PaymentService:** PaymentService получил подтверждение, но не смог обновить статус в OrderService. 3. **Задержка в NotificationService:** Не влияет на статус заказа, но может запутать клиента. *   **Диагностика:**\n    1. Проверить логи PaymentService на наличие ошибок при взаимодействии со StripeGateway. 2. Проверить логи OrderService на наличие ошибок при получении уведомления от PaymentService. 3. Использовать внутренний инструмент `OrderTracker` для ручной проверки статуса платежа в Stripe. *   **Решение:**\n    1. Если проблема в StripeGateway, повторить платеж через `OrderTracker`. 2. Если проблема в PaymentService/OrderService, вручную обновить статус заказа и инициировать повторное уведомление. ### 3.2. Проблема: Товар зарезервирован, но не оплачен\n\n*   **Описание:** InventoryService показывает, что товар зарезервирован, но PaymentService не зафиксировал оплату. *   **Причина:** Клиент начал оформление, но не завершил платеж. *   **Решение:** Через 30 минут OrderService автоматически отменяет резервирование и удаляет черновик заказа. Ручное вмешательство обычно не требуется.",
  "features.md_0": "# Основные возможности\n\nНаша платформа предоставляет мощные инструменты для автоматизации бизнес-процессов. ## Визуальный редактор воркфлоу\n\nСоздавайте сложные воркфлоу с помощью интуитивно понятного drag-and-drop интерфейса. ## Диспетчер (Dispatcher)\n\nКлючевая нода, которая может использовать GigaChat для принятия решений. Она работает в двух режимах:\n- **Router**: Направляет выполнение по разным веткам в зависимости от запроса. - **Orchestrator**: Создает и выполняет динамические планы из других воркфлоу для решения сложных задач. ## MCP Connector\n\nПозволяет вашим воркфлоу общаться с внешними \"серверами-инструментами\" по протоколу JSON-RPC, расширяя возможности системы.",
  "installation.md_0": "# Руководство по установке\n\n## Установка через Docker\n\nСамый простой способ начать работу — использовать Docker. 1. Убедитесь, что у вас установлен Docker и Docker Compose. 2. Создайте файл `docker-compose.yml`. 3. Запустите `docker-compose up -d`. Сервис будет доступен по адресу `http://localhost:8000`. ## Установка из исходного кода\n\nДля установки из исходного кода вам понадобится Python 3.10+. 1. Клонируйте репозиторий: `git clone ...`\n2. Установите зависимости: `pip install -r requirements.txt`\n3. Запустите сервер: `uvicorn scripts.main:app --reload`\n\n# Александр Фет\n## Я пришел к тебе с приветом"
}