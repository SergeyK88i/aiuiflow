
import uvicorn
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import logging
import uuid
import aiohttp

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
# –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
TELEGRAM_TOKEN = "7768666638:AAH-bOhEwfunRXFrIcE3TVT0xipdycXx7dM"
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="Telegram Tool MCP Server", version="1.0.0")

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –±—É–¥—É—â–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π) ---
SESSIONS = {}

# --- –û–ø–∏—Å–∞–Ω–∏–µ "—É–º–µ–Ω–∏–π" –Ω–∞—à–µ–≥–æ Telegram-—Å–µ—Ä–≤–µ—Ä–∞ ---
TOOLS_LIST = [
    {
        "name": "send_message",
        "description": "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç Telegram.",
        "inputSchema": {
            "type": "object",
            "properties": {
                "chat_id": {
                    "type": "number",
                    "description": "ID —á–∞—Ç–∞, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
                },
                "text": {
                    "type": "string",
                    "description": "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
                }
            },
            "required": ["chat_id", "text"]
        }
    }
    # –°—é–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: edit_message, send_photo –∏ —Ç.–¥.
]

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram ---
async def _send_telegram_message(chat_id: int, text: str) -> dict:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç API Telegram."""
    url = f"{TELEGRAM_API_URL}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=payload) as response:
            if response.ok:
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                return await response.json()
            else:
                error_text = await response.text()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {error_text}")
                raise Exception(f"Telegram API Error: {error_text}")

# --- –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ JSON-RPC –∑–∞–ø—Ä–æ—Å–æ–≤ ---
@app.post("/")
async def json_rpc_handler(request: Request):
    body = await request.json()

    if "jsonrpc" not in body or body["jsonrpc"] != "2.0" or "method" not in body or "id" not in body:
        return JSONResponse(
            status_code=400,
            content={"jsonrpc": "2.0", "id": body.get("id"), "error": {"code": -32600, "message": "Invalid Request"}}
        )

    request_id = body["id"]
    method = body["method"]
    params = body.get("params", {})

    logger.info(f"‚ö°Ô∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: method='{method}', id={request_id}")

    try:
        if method == "tools/list":
            result = handle_tools_list(params)
        elif method == "tools/call":
            result = await handle_tools_call(params) # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ await
        else:
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ–º initialize, —Ç.–∫. —Å–µ—Å—Å–∏–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
            raise HTTPException(status_code=404, detail=f"Method '{method}' not found")

        return JSONResponse(content={"jsonrpc": "2.0", "id": request_id, "result": result})

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ '{method}': {e}")
        return JSONResponse(
            status_code=500,
            content={"jsonrpc": "2.0", "id": request_id, "error": {"code": -32603, "message": "Internal Error", "data": str(e)}}
        )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ—Ç–æ–¥–æ–≤ ---
def handle_tools_list(params: dict):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
    logger.info(f"üìö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    return {"tools": TOOLS_LIST}

async def handle_tools_call(params: dict):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –∏–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
    tool_name = params.get("name")
    arguments = params.get("arguments", {})

    logger.info(f"üõ† –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ '{tool_name}'")

    if tool_name == "send_message":
        chat_id = arguments.get("chat_id")
        text = arguments.get("text")
        if not isinstance(chat_id, int) or not isinstance(text, str):
            raise ValueError("chat_id (integer) and text (string) are required for send_message")
        
        api_result = await _send_telegram_message(chat_id, text)
        return {"content": [{"type": "json", "json": api_result}], "isError": False}

    else:
        raise ValueError(f"Unknown tool name: {tool_name}")

# --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram Tool Server –Ω–∞ http://localhost:8001")
    print("   - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: send_message")
    uvicorn.run(app, host="0.0.0.0", port=8001)
