import uvicorn
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import logging
import os
import re
import json
from typing import List, Dict, Any
import sys

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤ ---
# –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –º–æ–¥—É–ª—å scripts.services.giga_chat
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(project_root)

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å SSL –¥–ª—è NLTK –Ω–∞ macOS ---
try:
    import nltk
    import ssl
    try:
        _create_unverified_https_context = ssl._create_unverified_context
    except AttributeError:
        pass
    else:
        ssl._create_default_https_context = _create_unverified_https_context
    nltk.download('punkt_tab', quiet=True)
    from nltk.tokenize import sent_tokenize
except ImportError:
    print("NLTK –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install nltk")
    exit()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º GigaChatAPI –∏–∑ –≤–∞—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
from scripts.services.giga_chat import GigaChatAPI

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

GIGACHAT_AUTH_TOKEN = "ZmU1MTI4YWYtMzc0My00ZmU1LThhNzEtMmUyZGI0ZjQzMDlhOmQ1OWQzZmI1LTcwOWItNDEyNS04MGU1LTUwNzFlOTQ3ODk5Zg=="
MAX_DEPTH = 2
TOP_LEVEL_CHUNK_TARGET_SIZE = 40000
LOWER_LEVEL_CHUNK_TARGET_SIZE = 10000

app = FastAPI(title="RAG MCP Server", version="1.0.0")

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
DOCUMENT_STORE: Dict[str, str] = {}
gigachat_client = GigaChatAPI()

# --- –û–ø–∏—Å–∞–Ω–∏–µ "—É–º–µ–Ω–∏–π" —Å–µ—Ä–≤–µ—Ä–∞ ---
TOOLS_LIST = [
    {
        "name": "answer_question",
        "description": "–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞—Ö–æ–¥–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.",
        "inputSchema": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "description": "–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                }
            },
            "required": ["query"]
        }
    }
]

# --- –õ–æ–≥–∏–∫–∞ RAG ---

def split_text_into_chunks(text: str, target_size: int) -> List[str]:
    """–î–µ–ª–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞–Ω–∫–∏, —Å—Ç–∞—Ä–∞—è—Å—å –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."""
    sentences = sent_tokenize(text)
    chunks = []
    current_chunk = ""
    for sentence in sentences:
        if len(current_chunk) + len(sentence) + 1 > target_size and current_chunk:
            chunks.append(current_chunk)
            current_chunk = sentence
        else:
            if current_chunk:
                current_chunk += " " + sentence
            else:
                current_chunk = sentence
    if current_chunk:
        chunks.append(current_chunk)
    return chunks

async def route_chunks(question: str, chunks: List[Dict[str, Any]], scratchpad: str, depth: int) -> Dict[str, Any]:
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç LLM –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤."""
    logger.info(f"==== –†–û–£–¢–ò–ù–ì –ù–ê –ì–õ–£–ë–ò–ù–ï {depth} | –û—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è {len(chunks)} —á–∞–Ω–∫–æ–≤ ====")

    system_message = ("–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã–±—Ä–∞—Ç—å —á–∞–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
                      "–ë—É–¥—å –∏–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω—ã–º, –Ω–æ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –≤–∞–∂–Ω–æ–µ. –¢—ã –û–ë–Ø–ó–ê–ù –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –†–ê–°–°–£–ñ–î–ï–ù–ò–ï: [—Ç–≤–æ–∏ –º—ã—Å–ª–∏] –í–´–ë–û–†: [JSON-–æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–æ–º 'chunk_ids']")

    user_message = f"–í–û–ü–†–û–°: {question}\n\n"
    if scratchpad:
        user_message += f"–ü–†–ï–î–´–î–£–©–ò–ï –†–ê–°–°–£–ñ–î–ï–ù–ò–Ø (SCRATCHPAD):\n{scratchpad}\n\n"
    user_message += "–î–û–°–¢–£–ü–ù–´–ï –ß–ê–ù–ö–ò:\n\n"
    for chunk in chunks:
        preview = chunk['text'][:500]
        user_message += f"--- –ß–ê–ù–ö ID: {chunk['id']} ---\n{preview}...\n\n"

    if not await gigachat_client.get_token(GIGACHAT_AUTH_TOKEN):
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω GigaChat –¥–ª—è —Ä–æ—É—Ç–∏–Ω–≥–∞.")

    response = await gigachat_client.get_chat_completion(system_message, user_message)
    response_text = response.get('response', '')

    reasoning = ""
    selection = []
    try:
        reasoning_match = re.search(r"–†–ê–°–°–£–ñ–î–ï–ù–ò–ï:(.*?)(–í–´–ë–û–†:|$)", response_text, re.DOTALL | re.IGNORECASE)
        if reasoning_match:
            reasoning = reasoning_match.group(1).strip()

        selection_match = re.search(r"–í–´–ë–û–†:(.*)", response_text, re.DOTALL | re.IGNORECASE)
        if selection_match:
            json_str = selection_match.group(1).strip()
            json_str = re.sub(r'^```json\n', '', json_str)
            json_str = re.sub(r'\n```$', '', json_str)
            selection_data = json.loads(json_str)
            selection = selection_data.get('chunk_ids', [])
        
        logger.info(f"–†–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {reasoning}")
        logger.info(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞–Ω–∫–∏: {selection}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ LLM-—Ä–æ—É—Ç–µ—Ä–∞: {e}\n–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {response_text}")
        return {"selected_ids": [], "scratchpad": scratchpad}

    updated_scratchpad = scratchpad
    if reasoning:
        scratchpad_entry = f"–ì–õ–£–ë–ò–ù–ê {depth} –†–ê–°–°–£–ñ–î–ï–ù–ò–ï:\n{reasoning}"
        if updated_scratchpad:
            updated_scratchpad += "\n\n" + scratchpad_entry
        else:
            updated_scratchpad = scratchpad_entry

    return {"selected_ids": selection, "scratchpad": updated_scratchpad}

async def navigate_and_answer(question: str) -> str:
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ RAG —Å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: '{question}'")
    scratchpad = ""

    top_level_chunks = []
    for doc_name, text in DOCUMENT_STORE.items():
        doc_chunks = split_text_into_chunks(text, TOP_LEVEL_CHUNK_TARGET_SIZE)
        for i, chunk_text in enumerate(doc_chunks):
            top_level_chunks.append({"id": f"{doc_name}_{i}", "text": chunk_text})

    current_chunks = top_level_chunks

    for depth in range(MAX_DEPTH + 1):
        result = await route_chunks(question, current_chunks, scratchpad, depth)
        scratchpad = result["scratchpad"]
        selected_ids = result["selected_ids"]
        
        selected_chunks = [c for c in current_chunks if c['id'] in selected_ids]

        if not selected_chunks:
            logger.warning("–ù–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —É—Ä–æ–≤–Ω–µ–π –Ω–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞.")
            break

        if depth == MAX_DEPTH:
            current_chunks = selected_chunks
            break

        next_level_chunks = []
        for chunk in selected_chunks:
            sub_chunks = split_text_into_chunks(chunk['text'], LOWER_LEVEL_CHUNK_TARGET_SIZE)
            for i, sub_chunk_text in enumerate(sub_chunks):
                next_level_chunks.append({"id": f"{chunk['id']}_{i}", "text": sub_chunk_text})
        current_chunks = next_level_chunks

    if not current_chunks:
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É."

    logger.info(f"–°–∏–Ω—Ç–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ {len(current_chunks)} —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —á–∞–Ω–∫–æ–≤.")
    context = "\n\n---\n\n".join([c['text'] for c in current_chunks])

    system_message = "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –Ω–∏–∂–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–ª—å–∑—è –Ω–∞–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏."
    user_message = f"–ö–û–ù–¢–ï–ö–°–¢:\n{context}\n\n–í–û–ü–†–û–°: {question}"

    if not await gigachat_client.get_token(GIGACHAT_AUTH_TOKEN):
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω GigaChat –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ –æ—Ç–≤–µ—Ç–∞.")

    final_response = await gigachat_client.get_chat_completion(system_message, user_message)
    final_answer = final_response.get('response', "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏ –≤ –¥—Ä—É–≥–∏–µ JSON
    return json.dumps(final_answer)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ HTTP –∏ JSON-RPC ---

@app.on_event("startup")
def on_startup():
    logger.info("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã.")
    docs_path = os.path.join(project_root, 'docs')
    for dirpath, _, filenames in os.walk(docs_path):
        for filename in filenames:
            if filename.endswith(".md"):
                file_path = os.path.join(dirpath, filename)
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        relative_path = os.path.relpath(file_path, docs_path)
                        DOCUMENT_STORE[relative_path] = f.read()
                        logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç '{relative_path}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç '{filename}': {e}")

@app.post("/")
async def json_rpc_handler(request: Request):
    body = await request.json()
    if "jsonrpc" not in body or body["jsonrpc"] != "2.0" or "method" not in body or "id" not in body:
        return JSONResponse(status_code=400, content={"jsonrpc": "2.0", "id": body.get("id"), "error": {"code": -32600, "message": "Invalid Request"}})

    request_id = body["id"]
    method = body["method"]
    params = body.get("params", {})
    logger.info(f"‚ö°Ô∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: method='{method}', id={request_id}")

    try:
        if method == "tools/list":
            result = {"tools": TOOLS_LIST}
        elif method == "tools/call":
            result = await handle_tools_call(params)
        else:
            raise HTTPException(status_code=404, detail=f"Method '{method}' not found")
        return JSONResponse(content={"jsonrpc": "2.0", "id": request_id, "result": result})

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ '{method}': {e}", exc_info=True)
        return JSONResponse(status_code=500, content={"jsonrpc": "2.0", "id": request_id, "error": {"code": -32603, "message": "Internal Error", "data": str(e)}})

async def handle_tools_call(params: dict):
    tool_name = params.get("name")
    arguments = params.get("arguments", {})
    logger.info(f"üõ† –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ '{tool_name}' —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {arguments}")

    if tool_name == "answer_question":
        query = arguments.get("query")
        if not query:
            raise ValueError("–î–ª—è 'answer_question' —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç 'query'")
        answer_text = await navigate_and_answer(query)
        return {"content": [{"type": "text", "text": answer_text}], "isError": False}
    else:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {tool_name}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ RAG MCP Server –Ω–∞ http://localhost:8002")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º python –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    uvicorn.run(app, host="0.0.0.0", port=8002)