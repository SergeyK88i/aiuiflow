import time
import logging
import os
import requests
import json
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ /docs –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
WATCH_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'docs'))
INGESTION_API_URL = "http://localhost:8005/" # URL –Ω–∞—à–µ–≥–æ ingestion_service
# --- –ö–æ–Ω–µ—Ü –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---

def call_ingestion_service(file_path: str):
    """–í—ã–∑—ã–≤–∞–µ—Ç API —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(file_path):
        logging.warning(f"–§–∞–π–ª {file_path} –±—ã–ª —É–¥–∞–ª–µ–Ω –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –º—ã —É—Å–ø–µ–ª–∏ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.")
        return

    logging.info(f"üöÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {file_path}")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç—å –≤ file:// URL
    file_uri = Path(file_path).as_uri()

    payload = {
        "jsonrpc": "2.0",
        "id": f"watch-{os.path.basename(file_path)}",
        "method": "tools/call",
        "params": {
            "name": "start_ingestion_job",
            "arguments": {
                "source_type": "local_file",
                "source_url": file_uri
            }
        }
    }

    try:
        response = requests.post(INGESTION_API_URL, json=payload, timeout=10)
        if response.status_code == 200:
            logging.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é —Ñ–∞–π–ª–∞ {os.path.basename(file_path)} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. –û—Ç–≤–µ—Ç: {response.json()}")
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é. –°—Ç–∞—Ç—É—Å: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
    except requests.RequestException as e:
        logging.error(f"üí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ingestion_service –ø–æ –∞–¥—Ä–µ—Å—É {INGESTION_API_URL}. –û—à–∏–±–∫–∞: {e}")
        logging.error("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ingestion_service –∑–∞–ø—É—â–µ–Ω.")

class MarkdownHandler(FileSystemEventHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ .md —Ñ–∞–π–ª–∞—Ö."""
    def on_created(self, event):
        if not event.is_directory and event.src_path.endswith(".md"):
            call_ingestion_service(event.src_path)

    def on_modified(self, event):
        if not event.is_directory and event.src_path.endswith(".md"):
            call_ingestion_service(event.src_path)

if __name__ == "__main__":
    if not os.path.exists(WATCH_PATH):
        logging.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {WATCH_PATH}")
        exit()
        
    logging.info(f"üëÄ –ó–∞–ø—É—Å–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∑–∞ –ø–∞–ø–∫–æ–π: {WATCH_PATH}")
    event_handler = MarkdownHandler()
    observer = Observer()
    observer.schedule(event_handler, WATCH_PATH, recursive=True)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()
    logging.info("üõë –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
