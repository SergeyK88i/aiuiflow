import asyncio
import aiohttp
import json

TELEGRAM_TOKEN = "7768666638:AAH-bOhEwfunRXFrIcE3TVT0xipdycXx7dM"
API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
# LOCAL_WORKFLOW_URL = "http://localhost:8000/execute-workflow/sales_consultation"
LOCAL_WORKFLOW_URL = "http://localhost:8000/execute-workflow/fitness_sales_bot"


async def get_updates(offset=0):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram"""
    url = f"{API_URL}/getUpdates?offset={offset}&timeout=30"
    async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False)) as session:
        async with session.get(url) as response:
            return await response.json()

async def send_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    url = f"{API_URL}/sendMessage"
    async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False)) as session:
        await session.post(url, json={
            "chat_id": chat_id,
            "text": text
        })

async def process_message(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–∞—à workflow"""
    chat_id = message["chat"]["id"]
    text = message.get("text", "")
    user_name = message["from"].get("first_name", "User")
    print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}' –æ—Ç {user_name}")

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê ---
    # –°–ø–∏—Å–æ–∫ ID –Ω–æ–¥, –∫–æ—Ç–æ—Ä—ã–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    # –í–æ–∑—å–º–∏—Ç–µ —ç—Ç–∏ ID –∏–∑ –≤–∞—à–µ–≥–æ UI-—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞.
    HANDLER_NODE_IDS = [
        "handler_interest",
        "handler_question",
        "handler_objection",
        "handler_purchase"
    ]
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

    async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False)) as session:
        try:
            async with session.post(LOCAL_WORKFLOW_URL, json={
                "user_id": f"tg_{message['from']['id']}",
                "message": text,
                "chat_id": chat_id,
                "user_name": user_name
            }) as response:
                print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status}")
                if response.status == 200:
                    result = await response.json()
                    print(f"üì¶ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, ensure_ascii=False, indent=2)[:500]}")

                    if result and "result" in result and result["result"]:
                        all_node_results = result["result"]
                        final_answer = None

                        # 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –æ—Ç–≤–µ—Ç –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –Ω–æ–¥–∞—Ö-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
                        for node_id in HANDLER_NODE_IDS:
                            if node_id in all_node_results:
                                node_result = all_node_results[node_id]
                                # –ò—â–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –≤ output.text –∏–ª–∏ –≤ response
                                answer_text = node_result.get("output", {}).get("text") or node_result.get("response")
                                if answer_text and isinstance(answer_text, str):
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ JSON
                                    if not answer_text.strip().startswith('{'):
                                        final_answer = answer_text
                                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –Ω–æ–¥–µ '{node_id}': {final_answer[:100]}")
                                        break # –ù–∞—à–ª–∏ –æ—Ç–≤–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

                        if final_answer:
                            await send_message(chat_id, final_answer)
                        else:
                            print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ –Ω–æ–¥–∞—Ö-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö.")
                            await send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.")
                    else:
                        print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
                        await send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {error_text}")
                    await send_message(chat_id, "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ workflow: {str(e)}")
            await send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")


async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
    offset = 0
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updates = await get_updates(offset)
            
            for update in updates.get("result", []):
                offset = update["update_id"] + 1
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if "message" in update and "text" in update["message"]:
                    await process_message(update["message"])
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(5)

if __name__ == "__main__":
    asyncio.run(main())
