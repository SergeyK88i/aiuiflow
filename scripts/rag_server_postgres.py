import uvicorn
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import logging
import os
import re
import json
from typing import List, Dict, Any
import sys
from contextlib import asynccontextmanager

try:
    import nltk
    from nltk.tokenize import sent_tokenize
    nltk.data.find('tokenizers/punkt')
except LookupError:
    nltk.download('punkt')
except ImportError:
    print("NLTK –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –≤–∞—à–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: pip install nltk")
    sys.exit(1)


try:
    import numpy as np
except ImportError:
    print("NumPy –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –≤–∞—à–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: pip install numpy")
    sys.exit(1)

project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(project_root)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π, –∞ –Ω–µ 'copy' —Ñ–∞–π–ª, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –º—ã –∏—Ö —Å–ª–∏–ª–∏
from scripts.services.giga_chat_copy import GigaChatAPI

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
GIGACHAT_AUTH_TOKEN = "ZmU1MTI4YWYtMzc0My00ZmU1LThhNzEtMmUyZGI0ZjQzMDlhOmQ1OWQzZmI1LTcwOWItNDEyNS04MGU1LTUwNzFlOTQ3ODk5Zg=="
MAX_DEPTH = 2
TOP_LEVEL_CHUNK_TARGET_SIZE = 20000
LOWER_LEVEL_CHUNK_TARGET_SIZE = 5000
CACHE_HIT_THRESHOLD = 0.99
CACHE_SHORTCUT_THRESHOLD = 0.92

# –§–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏
KNOWLEDGE_BASE_FILE = os.path.join(os.path.dirname(__file__), "knowledge_base.json")
CHUNKS_DATABASE_FILE = os.path.join(os.path.dirname(__file__), "chunks_database.json")

import asyncpg
from pgvector.asyncpg import register_vector

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
db_pool = None
gigachat_client = GigaChatAPI()


@asynccontextmanager
async def lifespan(app: FastAPI):
    logger.info("üöÄ RAG-—Å–µ—Ä–≤–µ—Ä (PostgreSQL) –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    global db_pool
    
    # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://user:password@localhost:5432/dbname")
        db_pool = await asyncpg.create_pool(DATABASE_URL, init=register_vector)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        async with db_pool.acquire() as connection:
            await connection.fetchval("SELECT 1")
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL (pgvector) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL: {e}")
        db_pool = None # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—É–ª –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ GigaChat
    if not await gigachat_client.get_token(GIGACHAT_AUTH_TOKEN):
        logger.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω GigaChat –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.")
    
    logger.info("‚ú® Startup complete.")
    yield
    
    # 3. –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    if db_pool:
        await db_pool.close()
        logger.info("üõë –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ.")


app = FastAPI(title="Pre-indexed RAG MCP Server", version="2.0.0", lifespan=lifespan)


TOOLS_LIST = [
    {
        "name": "answer_question",
        "description": "–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞—Ö–æ–¥–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.",
        "inputSchema": {
            "type": "object",
            "properties": {
                "query": {"type": "string", "description": "–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}
            },
            "required": ["query"]
        }
    }
]

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def synthesize_answer(question: str, context: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    logger.info(f"–°–∏–Ω—Ç–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ {len(context)} —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")
    system_message = "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –Ω–∏–∂–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–ª—å–∑—è –Ω–∞–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏."
    user_message = f"–ö–û–ù–¢–ï–ö–°–¢:\n{context}\n\n–í–û–ü–†–û–°: {question}"
    final_response = await gigachat_client.get_chat_completion(system_message, user_message)
    return final_response.get('response', "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.")

async def find_relevant_chunks(query_vector: List[float], limit: int = 25) -> List[Dict[str, Any]]:
    """–≠—Ç–∞–ø 1: –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫. –ù–∞—Ö–æ–¥–∏—Ç N —Å–∞–º—ã—Ö –ø–æ—Ö–æ–∂–∏—Ö —á–∞–Ω–∫–æ–≤ –≤ PostgreSQL."""
    if not db_pool:
        raise Exception("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    logger.info(f"üîç –í—ã–ø–æ–ª–Ω—è—é –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ {limit} –±–ª–∏–∂–∞–π—à–∏—Ö —á–∞–Ω–∫–æ–≤ –≤ PostgreSQL...")
    async with db_pool.acquire() as connection:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä <-> –∏–∑ pgvector –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–º—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        records = await connection.fetch(
            """SELECT id, chunk_text, doc_name FROM chunks ORDER BY embedding <-> $1 LIMIT $2""",
            query_vector, limit
        )
    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(records)} —á–∞–Ω–∫–æ–≤-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
    return [dict(record) for record in records]

async def rerank_chunks(question: str, chunks: List[Dict[str, Any]], limit: int = 5) -> List[Dict[str, Any]]:
    """–≠—Ç–∞–ø 2: –£–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç LLM –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–∏—Ö —á–∞–Ω–∫–æ–≤ –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤."""
    logger.info(f"üß† –í—ã–ø–æ–ª–Ω—è—é re-ranking –¥–ª—è {len(chunks)} —á–∞–Ω–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é LLM...")
    system_message = ("–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∏–∑ —Å–ø–∏—Å–∫–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
                      f"–¢—ã –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å JSON-–æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–æ–º 'best_chunk_ids', —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Å–ø–∏—Å–æ–∫ ID —Ä–æ–≤–Ω–æ –∏–∑ {limit} –ª—É—á—à–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤.")

    context_for_reranking = ""
    for chunk in chunks:
        context_for_reranking += f"--- –ß–ê–ù–ö ID: {chunk['id']} ---\n{chunk['chunk_text']}\n\n"

    user_message = f"–í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {question}\n\n–°–ü–ò–°–û–ö –§–†–ê–ì–ú–ï–ù–¢–û–í:\n{context_for_reranking}"

    response = await gigachat_client.get_chat_completion(system_message, user_message)
    response_text = response.get('response', '')

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM
        json_str = re.search(r"\{.*\}", response_text, re.DOTALL).group(0)
        best_ids = json.loads(json_str).get('best_chunk_ids', [])
        logger.info(f"‚úÖ LLM –≤—ã–±—Ä–∞–ª –ª—É—á—à–∏–µ —á–∞–Ω–∫–∏: {best_ids}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —á–∞–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±—Ä–∞–ª LLM, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        selected_chunks = [chunk for chunk in chunks if chunk['id'] in best_ids]
        return selected_chunks[:limit] # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ LLM –≤–µ—Ä–Ω—É–ª –±–æ–ª—å—à–µ

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ re-ranking: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM: {e}. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-{limit} –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ N —á–∞–Ω–∫–æ–≤ –∏–∑ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        return chunks[:limit]

@app.post("/")
async def json_rpc_handler(request: Request):
    body = await request.json()
    if "jsonrpc" not in body or body["jsonrpc"] != "2.0" or "method" not in body or "id" not in body:
        return JSONResponse(status_code=400, content={"jsonrpc": "2.0", "id": body.get("id"), "error": {"code": -32600, "message": "Invalid Request"}})
    request_id = body["id"]
    method = body["method"]
    params = body.get("params", {})
    try:
        if method == "tools/list": result = {"tools": TOOLS_LIST}
        elif method == "tools/call": result = await handle_tools_call(params)
        else: raise HTTPException(status_code=404, detail=f"Method '{body.get('method')}' not found")
        return JSONResponse(content={"jsonrpc": "2.0", "id": request_id, "result": result})
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ '{method}': {e}", exc_info=True)
        return JSONResponse(status_code=500, content={"jsonrpc": "2.0", "id": request_id, "error": {"code": -32603, "message": "Internal Error", "data": str(e)}})

async def handle_tools_call(params: dict):
    tool_name = params.get("name")
    arguments = params.get("arguments", {})
    if tool_name == "answer_question":
        query = arguments.get("query")
        if not query: raise ValueError("–î–ª—è 'answer_question' —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç 'query'")
        if not gigachat_client.access_token or not db_pool:
             raise Exception("–°–µ—Ä–≤–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ: —Ç–æ–∫–µ–Ω GigaChat –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

        # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –≤–µ–∫—Ç–æ—Ä –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
        query_vector = await gigachat_client.get_embedding(query)
        if not query_vector: raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.")

        # –®–∞–≥ 2: –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ (Retrieval)
        candidate_chunks = await find_relevant_chunks(query_vector, limit=25)
        if not candidate_chunks:
            return {"content": [{"type": "text", "text": json.dumps("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.")}], "isError": False}

        # –®–∞–≥ 3: –£–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (Re-ranking)
        final_chunks = await rerank_chunks(query, candidate_chunks, limit=5)

        # –®–∞–≥ 4: –°–∏–Ω—Ç–µ–∑ –æ—Ç–≤–µ—Ç–∞
        context = "\n\n---\n\n".join([c['chunk_text'] for c in final_chunks])
        final_answer = await synthesize_answer(query, context)
        
        # –ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –º—ã –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
        return {"content": [{"type": "text", "text": json.dumps(final_answer)}], "isError": False}
    else:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {tool_name}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Pre-indexed RAG MCP Server –Ω–∞ http://localhost:8002")
    uvicorn.run(app, host="0.0.0.0", port=8002)
