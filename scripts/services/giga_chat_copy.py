import aiohttp
import uuid
import json
import logging
from typing import Dict, Any

logger = logging.getLogger(__name__)

class GigaChatAPI:
    def __init__(self):
        self.access_token = None
        self.auth_token = None # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–µ—Ä–µ–ø–æ–ª—É—á–µ–Ω–∏—è
        self.conversation_history = []
        
    async def get_token(self, auth_token: str, scope: str = 'GIGACHAT_API_PERS') -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
        self.auth_token = auth_token # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        rq_uid = str(uuid.uuid4())
        url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"

        if auth_token and auth_token.lower().startswith('basic '):
            auth_token = auth_token[6:]

        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'application/json',
            'RqUID': rq_uid,
            'Authorization': f'Basic {auth_token}'
        }
        payload = {'scope': scope}

        try:
            logger.info(f"üîë –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω. URL: {url}")
            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=headers, data=payload, ssl=False) as response:
                    if response.status == 200:
                        data = await response.json()
                        self.access_token = data['access_token']
                        logger.info("‚úÖ GigaChat —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                        return True
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
            return False

    async def get_chat_completion(self, system_message: str, user_message: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat —Å –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞."""
        for attempt in range(2):
            if not self.access_token:
                logger.error("–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
                if not self.auth_token or not await self.get_token(self.auth_token):
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            
            # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
            messages = [{"role": "system", "content": system_message}]
            messages.extend(self.conversation_history)
            messages.append({"role": "user", "content": user_message})
            url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
            payload = {"model": "GigaChat", "messages": messages, "temperature": 1, "top_p": 0.1, "n": 1, "stream": False, "max_tokens": 512, "repetition_penalty": 1, "update_interval": 0}
            headers = {'Content-Type': 'application/json', 'Accept': 'application/json', 'Authorization': f'Bearer {self.access_token}'}

            try:
                async with aiohttp.ClientSession() as session:
                    async with session.post(url, headers=headers, json=payload, ssl=False) as response:
                        if response.status == 200:
                            # ... (–ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞) ...
                            return await response.json()
                        elif response.status == 401 and attempt == 0:
                            logger.warning("‚ö†Ô∏è –¢–æ–∫–µ–Ω –¥–ª—è chat/completions –∏—Å—Ç–µ–∫. –û–±–Ω–æ–≤–ª—è—é –∏ –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞...")
                            self.access_token = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω, —á—Ç–æ–±—ã –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                            continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–µ
                        else:
                            # ... (–ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫) ...
                            return {"success": False, "error": f"API Error: {response.status}"}
            except Exception as e:
                return { "success": False, "error": str(e) }
        return { "success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞." }

    def clear_history(self):
        self.conversation_history = []
        logger.info("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞")

    async def get_embedding(self, text: str, model: str = 'Embeddings') -> list[float] | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ —Å –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞."""
        for attempt in range(2):
            if not self.access_token:
                logger.error("–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
                if not self.auth_token or not await self.get_token(self.auth_token):
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

            url = "https://gigachat.devices.sberbank.ru/api/v1/embeddings"
            payload = {"model": model, "input": [text]}
            headers = {'Content-Type': 'application/json', 'Accept': 'application/json', 'Authorization': f'Bearer {self.access_token}'}

            try:
                async with aiohttp.ClientSession() as session:
                    async with session.post(url, headers=headers, json=payload, ssl=False) as response:
                        if response.status == 200:
                            data = await response.json()
                            embedding = data.get('data', [{}])[0].get('embedding')
                            if embedding:
                                if attempt > 0: logger.info("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º.")
                                return embedding
                            return None
                        elif response.status == 401 and attempt == 0:
                            logger.warning("‚ö†Ô∏è –¢–æ–∫–µ–Ω –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏—Å—Ç–µ–∫. –û–±–Ω–æ–≤–ª—è—é –∏ –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞...")
                            self.access_token = None
                            continue
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API GigaChat (Embeddings): {response.status} - {await response.text()}")
                            return None
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {str(e)}")
                return None
        
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥ –ø–æ—Å–ª–µ 2 –ø–æ–ø—ã—Ç–æ–∫.")
        return None
