import asyncpg
import json
import logging
import os
from typing import Dict, Any, List

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
db_pool = None

async def init_db_pool():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å PostgreSQL."""
    global db_pool
    if db_pool:
        return

    try:
        db_url = os.getenv("DATABASE_URL", "postgresql://user:password@localhost:5432/dbname")
        db_pool = await asyncpg.create_pool(db_url)
        logger.info("‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å PostgreSQL –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ workflows –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å PostgreSQL: {e}")
        db_pool = None

async def close_db_pool():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
    global db_pool
    if db_pool:
        await db_pool.close()
        logger.info("üõë –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å PostgreSQL –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ workflows –∑–∞–∫—Ä—ã—Ç.")

async def get_all_workflows() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö workflows (—Ç–æ–ª—å–∫–æ id –∏ name)."""
    if not db_pool:
        raise Exception("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    
    async with db_pool.acquire() as conn:
        records = await conn.fetch("SELECT id, name, status, updated_at FROM workflow_service.workflows ORDER BY updated_at DESC")
        return [dict(record) for record in records]

async def get_workflow_by_id(workflow_id: str) -> Dict[str, Any] | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ workflow –ø–æ –µ–≥–æ ID."""
    if not db_pool:
        raise Exception("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async with db_pool.acquire() as conn:
        record = await conn.fetchrow("SELECT * FROM workflow_service.workflows WHERE id = $1", workflow_id)
        return dict(record) if record else None

async def add_workflow(workflow_id: str, workflow_data: Dict[str, Any]):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç workflow –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    if not db_pool:
        raise Exception("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    name = workflow_data.get('name')
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –≤ JSON-—Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∏–ø JSONB
    nodes = json.dumps(workflow_data.get('nodes'))
    connections = json.dumps(workflow_data.get('connections'))
    status = workflow_data.get('status', 'draft')

    async with db_pool.acquire() as conn:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º INSERT ... ON CONFLICT –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ (UPSERT)
        await conn.execute("""
            INSERT INTO workflow_service.workflows (id, name, nodes, connections, status, updated_at)
            VALUES ($1, $2, $3, $4, $5, NOW())
            ON CONFLICT (id) DO UPDATE SET
                name = EXCLUDED.name,
                nodes = EXCLUDED.nodes,
                connections = EXCLUDED.connections,
                status = EXCLUDED.status,
                updated_at = NOW();
        """, workflow_id, name, nodes, connections, status)
    logger.info(f"üíæ Workflow '{workflow_id}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")


async def delete_workflow_by_id(workflow_id: str):
    """–£–¥–∞–ª—è–µ—Ç workflow –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    if not db_pool:
        raise Exception("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async with db_pool.acquire() as conn:
        await conn.execute("DELETE FROM workflow_service.workflows WHERE id = $1", workflow_id)
    logger.info(f"üóëÔ∏è Workflow '{workflow_id}' —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")