import requests
import json
import time

# URL-–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ RAG-—Å–µ—Ä–≤–µ—Ä–∞
SERVER_URL = "http://localhost:8002"

# –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞
QUESTIONS = [
    "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è GigaChat API?",
    "–ö–∞–∫–∏–µ –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ GigaChat API?",
    "–ö–∞–∫ —è –º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é GigaChat API?",
    "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç /chat/completions?",
    "–°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –±—ã–ª –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–∏—Å–∞–Ω –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º?",
    "–ö–∞–∫ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ?",
    "–ö–∞–∫ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞?",
]

def call_rpc(method: str, params: dict) -> dict:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON-RPC –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä."""
    payload = {
        "jsonrpc": "2.0",
        "method": method,
        "params": params,
        "id": 1,
    }
    headers = {'Content-Type': 'application/json'}
    response = requests.post(SERVER_URL, data=json.dumps(payload), headers=headers)
    response.raise_for_status()
    return response.json()

def run_benchmark():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–µ–Ω—á–º–∞—Ä–∫, –æ—Ç–ø—Ä–∞–≤–ª—è—è –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ –¥–ª—è RAG —Å–µ—Ä–≤–µ—Ä–∞...")
    print("-" * 50)

    total_time = 0
    questions_to_run = len(QUESTIONS)
    successful_requests = 0

    for i, question in enumerate(QUESTIONS):
        print(f"‚ùì –í–æ–ø—Ä–æ—Å {i+1}/{len(QUESTIONS)}: {question}")
        
        start_time = time.time()
        
        try:
            params = {
                "name": "answer_question",
                "arguments": {
                    "query": question
                }
            }
            response_json = call_rpc("tools/call", params)
            
            end_time = time.time()
            duration = end_time - start_time
            total_time += duration

            if "result" in response_json and response_json["result"].get("content"):
                successful_requests += 1
                # –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ JSON-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                try:
                    answer_str = response_json["result"]["content"][0]["text"]
                    # –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                    answer = json.loads(answer_str)
                    print(f"‚úÖ –û—Ç–≤–µ—Ç: {answer}")
                except (json.JSONDecodeError, KeyError, IndexError) as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e}")
                    print(f"   –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response_json['result']}")

            elif "error" in response_json:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response_json['error']['message']}")
                if 'data' in response_json['error']:
                    print(f"   –î–µ—Ç–∞–ª–∏: {response_json['error']['data']}")

            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫.")

        except requests.exceptions.RequestException as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
            print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ 'scripts/rag_server.py' –∑–∞–ø—É—â–µ–Ω.")
            questions_to_run = i
            break # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        
        print("-" * 50)

    print("üèÅ –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    if questions_to_run > 0:
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫.")
        avg_time = total_time / questions_to_run
        print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: {avg_time:.2f} —Å–µ–∫.")
        print(f"üìà –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_requests}/{questions_to_run}")


if __name__ == "__main__":
    run_benchmark()
